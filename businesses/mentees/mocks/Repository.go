// Code generated by mockery v2.14.1. DO NOT EDIT.

package mocks

import (
	mentees "github.com/Kelompok14-LMS/backend-go/businesses/mentees"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// CountByCourse provides a mock function with given fields: courseId
func (_m *Repository) CountByCourse(courseId string) (int64, error) {
	ret := _m.Called(courseId)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string) int64); ok {
		r0 = rf(courseId)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Create provides a mock function with given fields: menteeDomain
func (_m *Repository) Create(menteeDomain *mentees.Domain) error {
	ret := _m.Called(menteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mentees.Domain) error); ok {
		r0 = rf(menteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *Repository) FindAll() (*[]mentees.Domain, error) {
	ret := _m.Called()

	var r0 *[]mentees.Domain
	if rf, ok := ret.Get(0).(func() *[]mentees.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]mentees.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCourse provides a mock function with given fields: courseId
func (_m *Repository) FindByCourse(courseId string) (*[]mentees.Domain, error) {
	ret := _m.Called(courseId)

	var r0 *[]mentees.Domain
	if rf, ok := ret.Get(0).(func(string) *[]mentees.Domain); ok {
		r0 = rf(courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]mentees.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *Repository) FindById(id string) (*mentees.Domain, error) {
	ret := _m.Called(id)

	var r0 *mentees.Domain
	if rf, ok := ret.Get(0).(func(string) *mentees.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mentees.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByIdUser provides a mock function with given fields: userId
func (_m *Repository) FindByIdUser(userId string) (*mentees.Domain, error) {
	ret := _m.Called(userId)

	var r0 *mentees.Domain
	if rf, ok := ret.Get(0).(func(string) *mentees.Domain); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*mentees.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, menteeDomain
func (_m *Repository) Update(id string, menteeDomain *mentees.Domain) error {
	ret := _m.Called(id, menteeDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *mentees.Domain) error); ok {
		r0 = rf(id, menteeDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
