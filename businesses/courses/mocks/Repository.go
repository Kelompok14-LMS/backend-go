// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	courses "github.com/Kelompok14-LMS/backend-go/businesses/courses"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: courseDomain
func (_m *Repository) Create(courseDomain *courses.Domain) error {
	ret := _m.Called(courseDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*courses.Domain) error); ok {
		r0 = rf(courseDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: title
func (_m *Repository) FindAll(title string) (*[]courses.Domain, error) {
	ret := _m.Called(title)

	var r0 *[]courses.Domain
	if rf, ok := ret.Get(0).(func(string) *[]courses.Domain); ok {
		r0 = rf(title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByCategory provides a mock function with given fields: categoryId
func (_m *Repository) FindByCategory(categoryId string) (*[]courses.Domain, error) {
	ret := _m.Called(categoryId)

	var r0 *[]courses.Domain
	if rf, ok := ret.Get(0).(func(string) *[]courses.Domain); ok {
		r0 = rf(categoryId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(categoryId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindById provides a mock function with given fields: id
func (_m *Repository) FindById(id string) (*courses.Domain, error) {
	ret := _m.Called(id)

	var r0 *courses.Domain
	if rf, ok := ret.Get(0).(func(string) *courses.Domain); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*courses.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, courseDomain
func (_m *Repository) Update(id string, courseDomain *courses.Domain) error {
	ret := _m.Called(id, courseDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *courses.Domain) error); ok {
		r0 = rf(id, courseDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
