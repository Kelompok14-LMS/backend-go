// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	mentee_progresses "github.com/Kelompok14-LMS/backend-go/businesses/menteeProgresses"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Add provides a mock function with given fields: menteeProgressDomain
func (_m *Repository) Add(menteeProgressDomain *mentee_progresses.Domain) error {
	ret := _m.Called(menteeProgressDomain)

	var r0 error
	if rf, ok := ret.Get(0).(func(*mentee_progresses.Domain) error); ok {
		r0 = rf(menteeProgressDomain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Count provides a mock function with given fields: menteeId
func (_m *Repository) Count(menteeId string) ([]int64, error) {
	ret := _m.Called(menteeId)

	var r0 []int64
	if rf, ok := ret.Get(0).(func(string) []int64); ok {
		r0 = rf(menteeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(menteeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository(t mockConstructorTestingTNewRepository) *Repository {
	mock := &Repository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
