// Code generated by mockery v2.15.0. DO NOT EDIT.

package mocks

import (
	detail_course "github.com/Kelompok14-LMS/backend-go/businesses/detailCourse"
	mock "github.com/stretchr/testify/mock"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// DetailCourse provides a mock function with given fields: courseId
func (_m *Usecase) DetailCourse(courseId string) (*detail_course.Domain, error) {
	ret := _m.Called(courseId)

	var r0 *detail_course.Domain
	if rf, ok := ret.Get(0).(func(string) *detail_course.Domain); ok {
		r0 = rf(courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detail_course.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DetailCourseEnrolled provides a mock function with given fields: menteeId, courseId
func (_m *Usecase) DetailCourseEnrolled(menteeId string, courseId string) (*detail_course.Domain, error) {
	ret := _m.Called(menteeId, courseId)

	var r0 *detail_course.Domain
	if rf, ok := ret.Get(0).(func(string, string) *detail_course.Domain); ok {
		r0 = rf(menteeId, courseId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*detail_course.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(menteeId, courseId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUsecase(t mockConstructorTestingTNewUsecase) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
